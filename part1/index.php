<?php


/*
 * PHP课堂笔记
一、PHP：hypertext  Prerocessor的缩写，“超文本预处理”。具有面向对象语言的特征（封装，继承，多态）。
          是一种服务器端脚本语言，不需要编译，可直接解释运行；故书写PHP程序后，不需要重启Apache服务 器；
若修改了Apache的httpd.conf和PHP的PHP.ini配置文件后就必须重启Apache才会生效。
二、PHP作用：
     1）在服务器端收集表单数据；
     2）生成动画网页；
     3）字符串处理；
     4）生成动态图像；
     5）处理服务器端文件系统；
     6）编写数据库支持的网页；
     7）会话跟踪控制；
     8）处理XML文件。
三、PHP开发规范：
      1）标识符命名规范；
      2）注意代码格式；
      3）提供相应的注释     //表示单行注释     
四、PHP基础语法：
     1）标准分界符：<?php  PHP代码   ?>
     如果是嵌套在html内部，就必须要写结束标记，若是纯粹PHP文本，可以省略结束符。
      2）语句结束符：“;”每一句话结尾必须以分号结束；
      3）空白字符的使用：空白字符是指如空格，换行等符号；
     使用规范：
           1）下列情况使用两个空行：
                 一个源文件的两个代码片段之间；两个类声明之间。
           2）下列情况使用一个空行：
                两个函数之间以及函数内部局部变量和其后的第一条语句之间；块注释和行注释之间；一个函数内部                                           的两个代码块之间。
           3）下列情况使用空格：
                表达式之中；强制类型转换中等等。
           4）变量：是内存中的存储空间表示，用于存储和使用程序中的临时数据。
                1）PHP的变量是弱类型的，即变量的类型由存储的数据值决定；
                 2）变量的声明：在PHP程序中定义一个变量；
                      $变量名;     //声明一个变量未赋值；
                       $变量名 = 值;     //声明一个变量并赋值；
                       $变量名1 = $变量名2 = $变量名3 = $变量名4;     //声明多个变量赋予相同值。
               3）变量的作用域：
                    1.函数内部定义的只能在函数内部使用；
                    2.函数外部PHP开始符之内定义的全局使用。
               4）变量操作函数：
                    1. unset（变量名称）----销毁变量释放内存；可以有多个变量参数unset（变量名称1，变量名2...）--一次性销毁多个变量 ；
                    2.$result =  isset（变量名）---检查此变量是否已设置值，可以有多个变量参数$result =   isset（变量名1，变量名2... ） --检查这些变量是否都已设置值；
                    3.empty（变量名称）检测变量是否为null、0、只定义但未赋值 则返回true，否则返回false；
               5）可变变量：使用一个变量的值作为变量名的变量，即为可变变量；
                    语法：$$变量名 = 值；
               6）变量引用赋值：
                    1.概念：将一个变量和另一个变量关联在一起，如果其中一个变量发生变化，另一个也会发生变化，这称为变量引用赋值；
                         语法：$a = "test"; $b = &$a     //将$a的引用赋值给$b;
五、PHP的数据类型：
               1）标量类型（只能保存一个值）：布尔类型boolean，整数int（），浮点数float  doubel，字符串string（单引号：；双引号：）；
                         string型可以使用单引号和双引号和定界符来表示字符串：
                              单引号：字符串中不支持转义字符和变量‘’
                              双引号：字符串中支持转义字符和变量；例如“重庆你好$a”或者“重庆你好${a}abc”；
               2）复合类型（能保存多个值）：数组array，对象object；
               3）特殊类型：资源resource，空null；
          数据类型转换：
                    自动转换：boolean类型转换参与运算，true转化为1，false转换为0；
                                        null值参与运算，转换为0；
                                        字符串参与运算，全数字的转换为对应的证书或浮点数；
                                        包含非数字的字符串，以数字开头的，从左往右若是数字则转成对应整数或浮点数；以字母开头的，转换为0；
                    强制转换：
                              方法一：（目标类型）变量或值；
                              方法二：intval（变量或值）；floatval（变量或值）；setval（变量或值）；“$变量名称”；变量.“”；
                              方法三：settype（变量名称，“目标类型”）     不会产生新的变量
4）类型函数
     1）var_dump(变量名称)；输出变量的类型
     2）gettype（变量名称）；获取当前变量的数据类型字符串
     3）is_bool（变量名称）；判断变量是否为布尔型
     4）is_int（变量名称）；is_integer（变量名称）；is_long（变量名称）；判断变量是否为整数
     5）is_float（变量名称）； is_double（变量名称）； is_real（变量名称）；判断变量是否为浮点数
     6）is_string（变量名称）；判断变量是否为字符串类型
     7）is_array（变量名称）；判断变量是否为数组类型
     8）is_object（变量名称）；判断变量是否为对象类型
     9）is_resource（变量名称）；判断变量是否为资源类型
     10）is_null（变量名称）；判断是否为空类型
     11）is_scalar（变量名称）；判断变量是否为标量变量
     12）is_numeric（变量名称）；判断变量是否为任意类型的数字或数字字符串
     13）is_callable（变量名称）；判断是否是有效的函数名
六、常量：程序运行期间不能改变的值（一旦定义常量，就不能重新赋值）要求：全部大写；
     1）__file__     当前运行的PHP程序路径及文件名
     2）__DIR__     当前运行php文件所在的文件夹的物理路径
     自定义常量：define（常量名称，值）；（常量名：大写，必须是字符串数据类型）

七、运算符
     字符串运算符：点（.），将两个字符串或一个字符串和其他数据拼成一个字符串；


第二章：函数与数组
一、函数
     1、特点：函数是命名的，独立的，函数是执行特定的任务，可以将一个返回值返回给调用它的程序。
     2、优点：提高程序的重用性；提高软件的可维护性；提高软件的开发效率；控制软件的复杂性。
     3、函数分类：系统预定义的函数；第三方提供的函数；自定义函数。
     4、函数的调用
               函数名（参数1，参数2...）；调用函数可以书写在声明函数的文件任何位置。
     5、函数的返回值
               函数运行完成后给调用者返回的数据称为返回值。
               语法： return  返回值数据；
          注意：return表示两重含义，第一终止函数的执行，第二返回数据。函数中若出现多个return，则必须用分支结构组装。return只能返回唯一的数据值，要返回多个则需组装在数组中返回。
     6、函数参数传递数据值的方式
          1、值传递：将数据值复制一份传入函数中，此时函数对数据做出的改变不会影响函数之外。这是PHP参数传递数据值的默认方式。
     
     例：$v = 1;
        function a($arg){
          $arg++;
        }
        a($v);
        echo $v;  //此时输出1
          2、引用传递：将数据值的引用传入函数中，此时函数中对数据做的改变会影响函数之外的原始数据，这种传递方式要求形参前加“&”符号。
          
例：
          $v = 1;
          function a(&$arg){
               $arg++;
          }
          a($v);
          echo $v;     //此时输出2
   
       7、自定义函数的写法
          1、不限定参数类型：     function  a($arg){     }
          2、数组类型参数：     function  a(array  $arg){     }
          3、自定义对象类型参数：     function  a(自定义类名  $arg){     }
          4、引用参数类型：     function  a(&$arg){     }
          5、默认值参数：     function  a($arg = 默认值1）{     } 注：可选参数用形参默认值来实现，必须写在形参的末尾。
          6、不限定个数参数：利用func_get_args( )来获取参数数组。了解。
     8、回调函数参数：回调函数指将一个函数传入另一个函数，并在另一个函数内部使用该函数，这样的函数称为回调函数。
               1、回调函数的实现
                    a、利用函数名称串参数实现回调：
例：
     function a($sum){
         return $sum * 2; 
     }
     function b($fun){     //$sun 要保证是回调函数名称字符串
          for($i = 0; $i <= 5; $i++){
              echo $fun($i)."</br>";     //调用函数 
          }
     }
     b("a");     //传入回调函数名称字符串
    
     9、递归函数：在函数内部调用函数本身，被称为递归函数。通常递归函数会有附加条件用于判断是否要递归调用，并在特定的条件下返回固定值用于终止递归。     （像杀毒程序就要用到递归）

递归示例：
     function test($n){
          echo $n."&nbsp;&nbsp;";
          if($n>0){
               test($n-1);
          } else{
              echo "结束了！"; 
               }
          echo $n."&nbsp;&nbsp;";
     }


二、数组
     1、数组的概念：用一个变量保存多个值，在内存中划分一段连续的空间来保存多个值，这段连续的内存空间就叫数组，通常要给它起一个名称。数组里面的每一个数据都称为数组元素；数组元素在数组织都有一个唯一的编号（索引）；
这个索引与它对应的数组元素之间一一对应；如果索引是整数，则此数组是索引数组；如果索引是字符串，则此数组是关联数组。
     2、分类
          1）索引数组
          2）关联数组
     注意：索引必须唯一。
     3、PHP中数组的定义
          1、直接赋值声明
               语法：$数组名[索引] = 值；
          2、声明数组指定数字索引如果不连贯，则下一个元素的索引自动从当前最高值基础上加1计算
               $arr[ ]="a";   $arr[10] = "c";  $arr[ ] = "b";   //此时索引为11
          使用print_r( )函数可以输出数组所有的索引和对应元素值
          使用var_dump( )函数除上述功能外，还可以输出元素值的数据类型。
          3、使用array（）函数声明
               示例：$arr = array(1,2,3,4);     $arr =array ("name"=>"谭兵","age"=>22);
     4、数组遍历
          1、while循环
          2、do...while循环
          3、for循环： for( $i = 0; $i < count(数组变量名称）；$i++){ } 
          4、foreach循环:  foreach ( $(数组名称)  as $key => $value){ }
          5、while（list（$key, $value) = each(数组变量名称））{ }
          4、使用数组内部指针遍历数组：
             $b = true;
               while ($b){
                current(数组变量名称）；// 获取当前指针指向的元素 
                key(数组变量名称）; //获取当前指针指向的元素键
                $b = next(数组变量名称); //跳出循环条件
             }
               end(数组变量名称）; // 指针跳到最后一个元素
               reset(数组变量名称）; // 指针跳到第一个元素
               prev（数组变量名称）; // 指针向前跳一步，若前面没有元素则返回false。
     5、数组的处理函数：
          1、数组键值操作函数：
               A、array_values( )
               作用：将原数组中的所有值提取出来并存入一个新的索引数组中返回；
               语法：$values = array_values(数组名);
               B、array_keys( );
               作用：将原数组中的所有键提取出来并存入一个新的索引数组中返回；
               语法：$keys = array_keys(数组名 [,search_value,strict]);
               search_value：表示只查找指定值对应元素的索引；
               strict：表示是否进行search_value值数据类型的匹配，默认false表示不匹配数据类型。
               C、in _array( );
               作用：查找数组中是否存在指定的数据值，返回值为boolean；
               语法：$result = in_array(要搜索的值，搜索的数组名[，是否匹配数据类型，默认false]);
              D、array_search( );
               作用：与in_array( )函数作用相同，返回查找值的索引；
               语法：$index = array_search(要搜索的值，搜索的数组名[，是否匹配数据类型，默认false]);
               注：如果查找的值不存在，返回false；如果查找的值在数组有多个，返回第一个值的索引。
               E、$result = array_key_exists (要查找的索引，查找的数组 ); 检查一个数组中是否存在指定的键，返回boolean；
               F、$result = isset (数组名[要查找的索引] );  检查一个数组中是否存在指定的键，返回boolean；
               注：array_key_exists( )与isset( )的区别：array_key_exists( )对索引为null的值会返回true，而isset( )不会。
               G、$新数组名 = array_flip($原数组名 );  将一个数组的键和值互换，并返回一个新数组；
               注意：原数组的索引必须要一致，即要么是数字，要么是字符串，如果出现数字和字符串混用，则会报错；
                         如果原数组中的值重复出现多次，以最后一次出现的索引为新数组对应元素的值。
               H、$新数组名 = array_reverse($原数组名，[,preserve_keys] );  将原数组的元素顺序翻转，并创建新数组返回。
                    preserve_keys 表示是否保留原数组的键，默认不保留。
          2、统计数组函数
               A、$length = count(数组名[,mode]);统计数组的元素个数，与sizeof( )函数作用相同，用法也相同；
                    mode表示是否检测多维数组的元素个数，默认false不检测。
               B、$arr = array_count_values(数组名); 用于统计原数组中的元素值出现的次数，并返回一个新数组，在新数组，键是原数组不重复的元素值，值是在数组中出现的次数。
                    注意：检测不区分数据类型，数组中不能包含null值。
               C、$arr = array_unique(数组名);     排除原数组中重复的值，返回一个没有重复值的心数组。
          3、使用回调函数过滤数组元素值
               array_filter(原数组名，“回调函数名”);  使用用户自定义的规则提取原数组中符合条件的元素值，并返回一个新的数组，新数组中的元素值是原数组中符合条件的值，并保留其在原数组中的索引作为新数组中的索引。
例：
     $sums = array(1,2,3,4,5,6,7,8);
     //定义回调函数，需要一个参数，为传入的数组元素
     //该函数返回boolean值，true表示保留该值，false表示不保留
     function getEvenNum(){
          return $value % 2 ==0?true:false;
     }
     //调用array_filter函数，第二个参数是回调函数名称字符串形式
     $evens = array_filter($sums,"getEvenNum");
     print_r($evens);
         
          4、排序函数
函数名	说明
sort( )	按值从小到大进行排序
rsort( )	按值从大到小进行排序
ksort( )	按键值从小到大排序，值保留原来的键
krsort( )	按键值从大到小排序，值保留原来的键
asort( )	按值从小到大排序，值保留原来的索引关系
arsort( )	按值从大到小排序，值保留原来的索引关系
usort( )	使用回调函数按值对数组进行排序
uksort( )	使用回调函数按键对数组进行排序
uasort( )	使用回调函数按值对数组进行排序，并保留原来的索引关系
     统一语法：排序函数名（排序数组），返回boolean值表示排序是否成功，排序后原始数组的元素直接发生变化。
     5、$arr = array_slice(原数组名，offset[，length,preserve_keys]);  在原数组中按条件提取一定的值并返回一个新数组，如果原数组中的值是字符串作为键，则保留该建。
          offset:提取元素的起始索引位；
          length:提取元素的个数；
          preserve_keys:boolean值默认false，是否保留元素数组中提取值的键，如果原数组键是数字，默认不保留，如果是字符串，默认保留。
          示例： $arr = array_slice($arr1,1,2);
     6、array_splice(原数组名，offset[，length,replacearray];  用一个新的元素值替换原始数组中部分元素的值，此函数是先删除原始数组中指定起始索引和长度的数组元素，并把此部分元素作为返回值返回，然后将数组元素插入到删除元素的位置。
          offset:指定起始位置；
          length:替换的元素个数；
          replacearray：替换元素值所在的数组。
          注意问题：如果replacearray数组长度比length小，则原数组多余的元素位将删除；如果replacearray数组长度比length大，则原数组从替换位置开始完成替换的长度元素后，将增加多余的元素。    
例：
     $arr = array("A","B","C","D","E");
     $new_arr = array_splice($arr,1,2,array("a","b","c");
     print_r($new_arr);
     //输出：  A  a  b  c  D  E ;

     7、array_push(原数组名,值1，值2....);   将一个或多个值添加到原数组的末尾。
     8、$value = array_pop(数组名);  删除数组的最后一个元素并返回；
     9、$value = array_shift(数组名);  删除数组的第一个元素并返回。
     10、shuffle（数组名）； 将数组中的元素做随机排列；
     11、$sum = array_sum(数组名);  对所有的数组元素求和；     要求：数组中的元素必须是数值型或数值型字符串。
     12、$arr = range(frist,scecond[,step]);  创建一个包含指定范围元素的数组。
          frist:数组元素最小值；
          second:数组元素最大值；
          step:元素之间的步距，默认为1。
          注意：用于生成数值型数组或字母型数组。
     13、直接使用运算符对数组进行运算：
          $a + $b  :   表示合并，$a和$b合并为新数组，加号左边的数组元素全部保留，右边数组如果有与左边数组重复的键，会被左边键值覆盖。
     14、unset(数组名[索引]);  删除数组任何索引位元素。    
          注意：删除后数组不会重新恢复被删除的索引。如果想从新使用被删除的索引，那么可以使用array_values( )函数完成。---$arr = array_values($arr);

第三章：类和对象
     1、面向对象：
     2、面向过程：
     3、面向对象与面向过程的区别：
          面向对象对功能进行了统一，从而保证了程序的可维护性增强。程序的可维护性增加保证了程序的可扩展性的提高。
     面向对象的应用：
          1）面向对象分析：OOA(Object Oriented Analysis)
          2）面向对象设计：OOD(Object Oriented Design)
          3）面向对象编程：OOP(Object Oriented Programming)
     4、类和对象的概念：
          1）类是对象的抽象，对象是类的实例。
               类是具有相同属性和行为的一组对象的集合；对象是类里面的具体某一个事物。
    5、类的声明：
         语法： [修饰关键字] class{ 类成员 }
例：
//在类文件中声明类；
class Person{         

    var $name;

    var $age;

    function say(){
        echo "我的名字叫".$this->name.",今年".$this->age."岁<br/>";
    }
}

//在PHP文件中调用类文件；
require_once 'duixiang.class.php';
$p = new Person();
$p->name = "张三丰";
$p->age = 33;
$p->say();
          类声明注意问题：
               1)类文件名命名一般为类名 .php ,有些公司习惯以类名 .class . php 命名；
               2）类名遵循驼峰命名法，且每个单词首字母大写；
               3）一个类文件可以写多个类，但一般推荐一个文件写一个类。
     6、类的成员：属性和方法；
          1）属性：类的对象的特征（名词）；
               $对象名称 ->属性名称；     //获取获取对象的属性值
               $对象名称 ->属性名称 = 值；     //修改对象的属性的值
          2）方法：类的对象的功能行为（动词）；
               [$变量 = ]$对象名称 -> 方法名称（[实参列表]);     //调用对象的方法
          类的属性和方法必须依赖于类的对象。
          3）类的静态成员static
               1）静态属性：类的特征
                    类名称 :: $静态属性名称；     // 获取静态属性的值
                    对象 :: $静态属性名称；     // 获取静态属性的值
                    self :: $静态属性名称；     // 类内部获取静态属性的值
                    对象 :: $静态属性名称 = 值；     // 修改静态属性的值
                    类名称 :: $静态属性名称 = 值；     // 修改静态属性的值                   
                    self :: $静态属性名称 = 值；     // 修改静态属性的值
               2）静态方法：类的功能行为
                     [$变量 = ]$类名称 ::  静态方法名称（[实参列表]);     //调用静态方法
                    [$变量 = ]$对象 ::  静态方法名称（[实参列表]);     //调用静态方法
                    [$变量 = ]$对象 -> 静态方法名称（[实参列表]);     //调用静态方法
               注意：静态属性和静态方法依赖于对象，而不依赖与对象。
          4）静态成员与普通成员的区别： ****************************************************
               1）类的普通属性和普通方法必须依赖于对象；静态属性和静态方法依赖于类，而不依赖于对象。
               2）当类第一次被使用时，其中的静态成员将会产生。
               3）类的静态成员在内存中只有一份，此类的所有对象共享这一份。
                    普通属性和普通方法以创建对象的次数为准，创建多少次就会有多少份，互不影响，不共享。
               4）静态方法中不能调用普通属性和普通方法；普通方法中能够调用静态属性和静态方法。
               5）静态方法中可以随意调用静态方法和静态属性；普通方法中可以随意调用普通属性和普通方法。
          7、构造方法  ************
               1）概念：构造方法是用于创建对象并给当前创建的对象的某些属性设定一个初始值（初始化），创建对象的过程叫实例化。
               2）构造函数声明： function  __construct([参数列表]) {方法体 // 通常用来对成员属性进行初始化赋值 } ；
                    构造方法使用 new 类名称（[实参]) 来调用，而且是自动调；
                    构造方法是类中的特殊方法，每个类都必须有构造方法。当我们没有自定义类中的构造方法时，类中会默认有一个隐藏的无参数的构造方法。
                    PHP5.0以前版本要求构造方法名称与当前类名称保存一致。
                    PHP5.0以后的版本也可以这样使用，但是不推荐；PHP5.0以后的版本构造函数名称统一使用：__construct( );        
                注：一个类中只能有一个构造方法，所以如果我们自定义了类中的构造方法之后，此类的默认隐藏的无参数的构造方法将被覆盖。
          8、析构方法（销毁方法）
               1）在销毁对象之前做一些必要的特定操作，由对象自动调用，不能手动调用；
               2）特定：PHP5.0以后的版本类中才有析构方法，且不能有任何参数，且每个类有且仅有一个析构方法，
                    如果未书写析构方法，则此类中会默认隐藏一个且方法体中无任何代码的析构方法。一旦手动书写了析构方法，则原来默认的析构方法将被覆盖。
                    在类中声明析构方法名称也是固定的，用两个下划线“ __destruct( );"
                    析构函数声明： function  __destruct([参数列表]) {方法体 // 通常用来完成一些对象销毁前的清理任务 } ；
                    当调用 unset(对象变量名称);时会自动调用该对象的析构方法。
第四章：封装和继承
     1、封装
          概念：把对象的成员属性和方法结合成一个独立的相同单位，并尽可能隐藏对象的内部细节，只保留有限的接口使之与外部发生联系,当某些属性只能获取不能修改时，可将属性设置为private的，提供一对set get方法，通过这两个方法来控制访问权限级别，这就叫封装。
       2，set 和get：set表示修改，需要传参数，没有返回值；get表获取，不需要传参数，有返回值。
          实现：将属性或内部方法私有化（private），只有当前内中可以直接访问该类属性，在当前类的外部文件中就只能通过set 和  get方法来访问该属性 ： private $属性名；
提供公共的方法对属性进行访问（存取器方法）
     //获取属性方法
     public function get属性名(){
          return $this->属性名；
     }

     //修改属性方法
     public function get属性名(变量名){
          [if(条件){]
               $this->属性名 = $变量名；
          [}]
     }
          3、访问修饰符
               1）写在属性或方法前面，用来控制该属性或方法的被访问权限。
               private  私有的  当前类才能访问   public   protected；
          4、魔术方法
               1）__set(propertyName,propertyValue)
               2)__get(propertyName)
               注意：魔术方法不能手动调用，只能通过特殊语句让该对象自动调用魔术方法。
               当执行$->$对象变量 = 值；时会自动调用__set( )方法；
               当执行$->对象变量；是会自动调用__get( ) 方法。
               3）__isset( $对象变量->$propertyName);
               4)）__unset($对象变量->$propertyName);
               5）__toString( );   *****当是echo语句输出应对象时，将对象转化为字符串输出。
               6）__call($functionName，$args);   当调用一个对象的不存在函数是给出一些提示信息。
               7）__autoload($className);  当PHP文件中使用一个类时，自动加载该类文件。
                    PHP-5.1.2之后的版本改成了
                         spl_autoload_register(function (className){ require_once $className. ".class.php" }
          5、继承
               1）概念：把一些事物的相同的属性和行为提出来放在一个新的类文件中，大家共享这些属性和行为，这些事物与新的类之间就构成了继承关系；
               2）is-a 来判断继承关系是否恰当；
                    A是一种B，则就是A继承B；
               3）PHP只支持单继承，也就是一个子类只能有一个父类，一个父类可以有多个子类；
               4）实现方式： class A extends B{     };
               5)特点：一个类继承了另一个类之后，就拥有父类的所有属性和行为； 构造方法也可以被继承。
          6、方法重写*****************************************************************************************************************************
               1）概念：方法重写是面向对象语言的核心概念；是指在继承关系中父类里定义一个成员方法，子类也定义一个跟父类方法同名且形式参数相同的方法，这种就称为方法重写（子类重写了父类的方法）。
               2）特点：
                    a、方法重写的前提是继承关系；
          b、子类与父类要有同名（形参也相同） 的方法；
          c、方法重写的好处是多态，程序扩展性强；
          d、子类重写父类的方法之后，当调用子类对象的重写方法时，将直接执行子类里面的方法，父类里被覆盖的方法将永不执行。
7、final 和 const 关键字
     1）final 写在class前面修饰，表示当前类不能被继承，是一个终态类；
     2）const 写在 function前面修饰方法，表示当前方法不能被重写；
     3）const关键字写在成员变量之前，表示当前变量是一个常量，不能被赋值；
          a、常量名称全大写，不以$开头；
          b、常量在书写到时候就赋值，程序运行中不能再对其赋值；
          c、常量前面不能写public 和 static 修饰符，默认就是public 和static和const修饰的 ；
8、instanceof 关键字
     1）语法： $对象变量名称 instanceof 类名称 ; 判断该变量属不属于这个类；返回布尔值。
9、namespace  和use 
     1）用在项目有很多子文件夹的情况下，且类有同名现象，用于区分我们要使用哪个子文件夹之类的类；在类文件开头写 namespace 文件夹名（当前类所在项目的文件夹路径，且以\隔开）；
          然后要使用该类的化、话就用use关键字引入： use  文件夹名\类名称 ；
10、异构集合
     1）概念：当一个数组类统一存放某个类的对象时，但放进去的不是该类的对象，而是该类的子类对象，这样就构成了异构集合。那么，该数组内的所有对象，
          在其父类角度上观察，其属同一个类；但在子类本身角度看，其不属于同一个类型；
     当一个地方需要
练习：1、用面向对象方式模拟人吃不同的水果有不同的感觉。
          2、用面向对象的方式模拟士兵开始进攻，不同的士兵采用不同的进攻方式。
          3、有两个人在玩石头剪刀布，请用面向对象的方式编程实现两人都随机出拳，然后判断胜负；
          4、猴子选大王：有15只猴子围城一个圈，从其中任意一只猴子开始报数（从1开始报数），报到7的直接淘汰，然后从它右边的那一只猴子又从1开始报数，报到7的淘汰，一次类推，直至剩下最后一只猴子，它就是侯大王。
第五章：抽象，多态和接口
     1，抽象
          1）概念：在继承关系中，子类重写父类的方法，当我们调用子类对象重写后的方法，发现会执行子类中重写后的方法，而忽略父类被重写的方法；所以，父类被撤销的方法中的代码就可以省略不写，故删除了父类被重写的方法的大括号换成了分号，并在function前面加上 abstract 关键字，且在类名称 class 前也加上 abstract 关键字。这样就形成了抽象类，方法就变成了抽象方法。
          2）抽象类与普通类的区别
              a、 一个抽象类中可以有抽象方法也可以没有抽象方法；而普通类中不能有抽象方法；
              b、抽象类不能直接使用 new 关键字创建对象，而普通类可以；
              c、抽象类和普通类中都可以写普通属性和普通方法；
              d、抽象类一般用来作为父类，一个类继承抽象类，就必须重写抽象类中的方法。**********
     2、多态
          1）概念：不同对象的同一行为表现出不同的结果。在继承关系中，一个父类有多个子类且这些子类都重写父类的同一个方法，但重写得不一样；当把子类对象放在异构集合中或传入到一个函数内部时，调用该对象的重写后的方法，此时就会出现动态绑定效果（内存会自动判别该对象属于哪一个子类的对象，并且将其从父类类型转化成该子类类型），最终效果就会出现不同对象的同一行为表现的不同结果。这就是多态。 
     3、接口
          1）概念：一组行为的集合，不涉及具体的对象，其本质是行为抽象的集合，通常用于表示不同类型的对象具有的相同的行为；
          2）定义：
          interface  接口名 {
               //接口中可以有属性，但只能是常量
               const 常量名 = 值;
               //接口中的方法默认就是抽象的，所以不需要加abstract
               function 方法名（[形参列表]);
     4、接口实现类：
          class  类名   implements  接口1[,接口2,接口3,....,接口n] ;{ }
          注：a、接口实现类表示该类对象具有接口规定的全部行为；
                b、接口实现类必须重写接口定义的所有抽象方法。
                c、接口可以继承其他的接口，这表示当前接口具有与其他接口所有的行为；
                d、接口继承单继承和多继承都支持。
     5、接口与抽象类的区别
               a、抽象类是用于描述对象的，而接口只描述行为，不涉及任何对象；
               b、抽象类中可以有抽象行为，也可以没有，而接口中的行为都必须是抽象行为；
               c、抽象类中可以有成员属性（可以是变量也可以是常量），而接口中的成员属性只能是常量。

第六章：日期和字符串
     1、字符串的特点：
          a、对字符串中的单个字符，可以通过数组的方式处理；
               获取字符串中某位字符： $str = "string";  echo $str[0]; //输出$str的0位字符；
               修改字符串某位的字符： $str = "string" ;  $str[0] = "S"; echo $str;  //输出String;
          b、PHP是弱类型语言，所以如果使用字符串函数传入的不是字符串类型的数据，会自动转换成字符串进行处理；
          c、PHP中字符串可以用双引号和单引号括起来，    
     2、字符串的常用函数
               格式                      功能
               %d                         整数
               %s                         字符串
               %f                         浮点数     %.2     带两位小数的浮点数并四舍五入；
     %%                        返回百分比符号
     %b                         二进制数
     %c                         依照ASCⅡ值的字符   
     %e                         科学计数法（1.5e+2）
     %u                         无符号十进制数
     %F                         浮点数
     %o                         八进制数
     %x                         十六进制数 小写字母
     %X                         十六进制数 大写字母
1）字符串长度
       strlen("fdg22");      //输出字符串长度    mb_strlen（）函数； （面试重点）      strlen（）可以准确获取中文字符串的长度； 一个中文字符占3个字节；
2）对字符串中单个字符处理
      取字符串某个字符    $str = "abcde"; echo $str[2]; //输出$str的2位字符c
      修改字符串某个字符 $str = "abcde"; $str[2]="e"; echo $str;//输出$str为"abede"
3）字符串输出函数：
       1、echo " " ;    输出字符串内容或者变量的值
       2、print ("");   输出字符串内容或者变量的值，效率低于echo
       3、die ("");exit("")函数别名，
           可以传入字符串（传入字符串，表示终止程序前输出字符串的信息）或数字参数（0表示直接终止程序）
          4）、printf()函数是格式化输出函数, 一般用于向标准输出设备按规定格式输出信息。
           例：$strmima = "325f %1\$s jkd %1\$s 125  %2\$s fjh jhjs dj %1\$s ke";
              printf($strmima,"中国","重庆");
              输出：325f 中国 jkd 中国 125 重庆 fjh jhjs dj 中国 ke3
           printf（format,arg1,arg2,...） 常用于计算浮点数           
          注：sprintf()用法与printf()相似，但此函数不输出，而是返回格式化字符串的内容
  5）字符串格式化函数
       ltrim() 删除左边的预定义字符
           $str = ltrim(string str[,srting charlist]);
           $str = "12 td dd";
           echo ltrim($str,"0..9");删除数字
       rtrim()删除右边的预定义字符
       trim()删除两边的预定义字符

   6）str_pad()用指定的字符串将原始字符串填充到指定的新长度
           $str = str_pad($oldstr,newlength[,fillstr,filltype]);
           $oldstr：原始字符串
           $newlength：原始字符串填充后的长度
           $fillstr：填充的字符串，不写默认为空格填充
           $filltype：填充的类型，取值STR_PAD_LEFT,STR_PAD_REGTH(默认),STR_PAD_BOTH;

            7）strtoupper( )全部转换成大写
       strtolower( )全部转换成小写
       ucfirst( )   把字符串第一个字符转成大写
       ucwords( )   把以空格分隔的每个单词首字母大写

   8）与html相关的字符串处理函数
       nl2br( )将/n转换为html中的<br/>   
       htmlspecialchars( )将字符串中的html的特殊字符转换成实体字符
           列如">”转成"&gt"；
           htmlspecialchars($string[,flags,charset,double_encode]);
       strip_tags( )删除字符串中的html标记
       htmlspecialchars_decode( ) 将html实体转换为后天努力标签，别名函数
   9）其他字符串格式化函数
       strrev(); 将字符串内容反转
       number_format( );对数字进行千位分组格式化转化成字符串     （一般就是将长串数字分割成3位一组，用逗号隔开 ）
       md5( )将字符串加密--常用于对用户密码加密*************************************************
           $result = md5($str[,raw]);
           raw:布尔值，默认false，表示按32位的16进制数组成的字符串进行加密     （一般用来对用户的密码进行保护放入数据库中）
           true表示按13位二进制数加密。

            10）stripos()查找一个字符串在另一个字符串中第一次出现的位置索引（忽略大小写）
           $pos =  strupos($str,find[,start]);
           $pos:返回的索引，如果未找到，返回false
           $str:被搜索的字符串
           find:要查找的内容
           start:查找的起始位置（默认不填为从0开始）
            10）strpos()查找一个字符串在另一个字符串中第一次出现的位置索引（区分大小写）

            11）strripos()查找一个字符串在另一个字符串中最后一次出现的位置索引（忽略大小写）
           $pos =  strupos($str,find[,start]);
           $pos:返回的索引，如果未找到，返回false
           $str:被搜索的字符串
           find:要查找的内容
           start:查找的起始位置（默认不填为从0开始）
            11）strrpos()查找一个字符串在另一个字符串中最后一次出现的位置索引（区分大小写）

            12）strcasecmp()比较两个字符串大小，忽略大小写
                0表示相等，正数表示前一个大于后一个，负数反之
            12strcmp()    比较两个字符串大小，区分大小写
                0表示相等，正数表示前一个大于后一个，负数反之（小写大于大写）

            13）substr()截取字符串的一部分返回
                $result = substr($str,start,length);
             14）字符编码转换
       chr(51); Unicode码转换成字符
       ord($s); 字符转换成Unicode码

     2、正则表达式
          1）preg_match(pattern,subject[,matches]);只查询一次；返回整数类型，符合条件的就放入数组，一维数组；
          2）preg_match_all(pattern,subject[,matches] );查询多次，返回整数类型；符合条件的就放入数组，多维数组；
          3）preg_grep（pattern，input）；通过正则表达式对数组中的字符串进行筛选，满足正则表达式的就留下放入数组并返回；
          4）preg_replace（pattern，replacement，subject[，limit，$count])；******************************************************************
               作用：反向引用（日期的操作）；
                         前三个参数可以以数组的方式提供，如果subject为数组，那么此函数会自动循环该数组，将该数组中每一个元素字符串都要用 pattern进行查找，并且用replacement来替换；
                         如果第二个参数replacement是数组，则第一个参数pattern就必须是数组，且数组长度要相等；

     3、分割字符串
          1）preg_split（pattern，subject[，limit]）；以正则表达式分割字符串，返回数组；     **************
          2）explode（）；以普通字符串来分割字符串；返回数组；     ********************************************************************
          3）implode（glue，pieces）；将数组中的元素以glue间隔拼在一起，形成字符串；与explode（）完全相反；pieces 表示要分割的数组，glue 表示用什么来分割； ***************************************

2、日期和时间
     1、UNIX时间戳：从1970年1月1日
     2、日期时间函数
          1）miktime（hour,minute,）；将日期和时间转换成UNIX时间戳；
          2）strtotime（）；将英文文本日期转换成UNIX时间戳；
          3）time（）；获取系统的当前时间戳；
          注：PHP默认的时区为UTC，与北京时间相差8个小时；
          4）getdate（）；    getdate（strtotime（"now"））；      返回指定时间戳的一组关联数组；
          5）date（Y-M-D H : I : S）；将时间戳做格式化输出；
a:   "am"或是"pm" 
A:   "AM"或是"PM" 
d:   几日，两位数字，若不足则补零；从"01"至"31" 
D:    星期几，3个英文字母，如:"Fri" 
F:    月份，英文全名，如:"January" 
h:    12小时制的小时，从"01"至"12" 
H:    24小时制的小时，从"00"至"23" 
g:    12小时制的小时，不补零；从"1"至"12" 
G:    24小时制的小时，不补零；从"0"至"23" 
j:    几日，不足不被零；从"1"至"31" 
l:    星期几，英文全名，如："Friday" 
L:    判断是否是闰年，是返回1，否则返回0
m:    月份，两位数字，从"01"至"12" 
n:    月份，两位数字，不补零；从"1"至"12" 
M:    月份，3个英文字母；如："Jan" 
s:   秒；从"00"至"59" 
S:    字尾加英文序数，两个英文字母,如："21th" 
t:    指定月份的天数，从"28"至"31" 
U:    总秒数 
w:    数字型的星期几，从"0(星期天)"至"6(星期六)" 
Y:    年，四位数字 
y:    年，两位数字 
z： 一年中的第几天；从"1"至"366"
     
     3、修改默认时区

     4、获取日期时间的微妙数
          microtime（[bool get_as_float]）；
               get_as_float：表示是否按浮点数返回微妙值，默认false，按字符串返回，字符串前半部份为微妙，后半部分为秒数；
第七章：异常处理
     1、错误处理
          1）错误，警告，注意对程序有什么影响？
               错误，警告，注意是三种错误报告级别；错误会终止程序运行；警告和注意只会在页面上输出提示信息，但不会终止程序运行，程序继续向下运行；
     2、错误显示(在PHP.ini配置文件里面修改即可）
          display_errers = On ; 是否在页面上显示
          log_errors = off ;  是否在日志文件中显示
          error_log = "路径" ;  自定义日志文件位置  默认syslog系统日志



 */
    //处理中文乱码
    header("Content-type:text/html;charset=utf-8");
    //echo输出字符串
    echo "Hello 梵高";
    $a = 54.2;
    echo $a;
    $b = "重庆";
	echo $b;
	echo "重庆${a}四川<br/>";
	echo "重庆{$a}四川<br/>";
	$i = 1;
	$k = 3;
	$j = $i++ * --$k;
	$f = (++$j > 4 && ++$k < 0);
	echo $j;
	echo "重庆$a"."四川<br/>";
	echo "重庆\n四川<br/>";
$str=<<<wew
    fdsfgds
wew;
    echo "重庆\n四川{$str}<br/>";

    
/*
 * 2017-2-28作业：
 * 
 */
    $col = 10;//行数
    $row = 15;//列数
    $nu = 5;//菱形宽度
    /*
     * 打印平行四边形
     */
    for($i = 0 ; $i < $col ; $i++){
        for($k = 0 ; $k < 2 * $row - $i; $k++){
            if($k > $col - $i - 1){
                echo "*";
            }else{
                echo "&nbsp;";
            }
        }
        echo "<br/>";
    };
    
    echo "<br/>";
    /*
     * 打印三角形
     */
    for($i = 0 ; $i < $col + 1; $i++){
        for($k = 0 ; $k < $col - $i ; $k++){
            echo "&nbsp;";
        }
        for($j = 0 ; $j < $i * 2 - 1 ; $j++){
            echo "*";
        }
        echo "<br/>";
    };
    
    echo "<br/>";
    /*
     * 打印倒立三角形
     */
    for($i = 0 ; $i < $col ; $i++){
        for($k = 0 ; $k <$i ; $k++){
            echo "&nbsp;";
        }
        for($j = 0 ; $j < ($col *2-1) - $i * 2 ; $j++){
            echo "*";
        }
        echo "<br/>";
    };
    
    echo "<br/>";
    /*
     * 打印菱形
     */
    for($i = 0 ; $i < $nu * 2 ; $i++){
        if($i <= $nu){
            for($k = 0 ; $k < $nu - $i ; $k++){
                echo "&nbsp;";
            }
            for($j = 0 ; $j < $i * 2 - 1 ; $j++){
                echo "*";
            }
            echo "<br/>";
        }else{
            for($k = 0 ; $k < $i  - $nu ; $k++){
                echo "&nbsp;";
            }
            for($j = 0 ; $j < ( 2 * $nu - $i ) * 2 - 1  ; $j++){
                echo "*";
            }
            echo "<br/>";
        }
    };
    
    
    
    /**
     *菱形函数：
     * $s传参数，表示菱形高度的一般
     * 有参数，无返回
     */
    function test1($s){
        for ($i=-$s;$i<=$s;$i++){
            for ($j=0;$j<abs($i);$j++){
                echo "&nbsp;";
            }
            for ($k=0;$k<2*($s-abs($i))-1;$k++){
                echo "*";
            }
            echo "<br/>";
        }
        
    }
    test1(5);
    
    /**
     *无参数，无返回 
     */

    echo "<br/>";
    
    /**
     *无参数，有返回
     *返回1表示成功，其他表示失败
     */
    function test2(){
        echo "<span style='color:blue;'>测试</span>";
        return 1;
    }
    $i = test2();
    echo $i;
    echo "<br/>";
    
    /**
     * 测试3-有参数无返回
     * @param int $param1
     * @param int $param2
     */
    function test3($param1,$param2){
        echo ($param1+$param2);
    }
    test3(1,2.5);
    echo "<br/>";
    test3("jh",2.5);
    echo "<br/>";
    echo "<br/>";
    /**
     * 递归函数
     * @param unknown $n
     */
    function test($n){
        echo $n."&nbsp;";
        if($n>0){
            test($n-1);
        }else {
          echo "<-->"; 
        }
        echo $n."&nbsp;"; 
    }
    
    test(5);
?>
